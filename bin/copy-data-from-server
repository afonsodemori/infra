#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

source .env

if [[ -z $1 ]]; then
    echo "Usage: $0 <DIR>"
    exit 1
fi

check_prod_environment() {
    if [[ ${ENV:?} = "prod" ]]; then
        echo "[!] YOU ARE IN PRODUCTION"
        read -rp "Proceed with the copy of $dir_to_copy? (yes/NO): " response
        if [[ $response != "yes" ]]; then
            echo "Operation aborted."
            exit 1
        fi
    fi
}

check_already_existing_local() {
    mkdir -pv "$local_dir";

    if [ "$(ls -A "$local_dir" | wc -l)" -ne 0 ]; then
        read -rp "The local directory is not empty. Continue? (yes/NO) " response
        if [[ $response != "yes" ]]; then
            echo "Operation aborted."
            exit 1
        else
            rm -rf "${local_dir:?}"/{*,.*}
        fi
    fi
}

compress_remote_dir() {
    echo "Compressing '$dir_to_copy' in the remote server..."
    # shellcheck disable=SC2029
    ssh "$remote_host" "cd $server_data_dir && tar -zcf /tmp/$dir_to_copy.tgz $dir_to_copy"
}

download_compressed_copy() {
    echo "Downloading '$dir_to_copy.tgz'..."
    scp "$remote_host:/tmp/$dir_to_copy.tgz" "/tmp/$dir_to_copy.tgz"
}

delete_copy_from_remote() {
    echo "Deleting remote '$dir_to_copy.tgz'..."
    # shellcheck disable=SC2029
    ssh "$remote_host" "rm /tmp/$dir_to_copy.tgz"
}

extract_locally() {
    mkdir -pv "$local_dir"
    echo "Extracting '$dir_to_copy.tgz' locally..."
    tar -zxf "/tmp/$dir_to_copy.tgz" -C "$local_data_dir"
}

delete_local_compressed_copy() {
    rm "/tmp/$dir_to_copy.tgz"
}

dir_to_copy="$1"
remote_host="${SERVER_USER:?}@${SERVER_HOST:?}"
server_data_dir="${SERVER_DATA_DIR:?}"
local_data_dir="${DATA_DIR:?}"
local_dir="${DATA_DIR:?}/${dir_to_copy:?}"

check_prod_environment
check_already_existing_local
compress_remote_dir
download_compressed_copy
delete_copy_from_remote
extract_locally
delete_local_compressed_copy

echo "Done."
